apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'idea'
apply plugin: 'application'

def props = new Properties()
new File('../libs.properties').withInputStream {
    stream -> props.load(stream)
}
for(prop in props) {
    project.ext[prop.key] = prop.value
}

sourceSets {
    main {
        scala {
            srcDirs = ['src/main/gatling']
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'http://repository.excilys.com/content/groups/public' }
}

dependencies {
    compile "com.h2database:h2:${h2Version}"
    compile "io.gatling.highcharts:gatling-charts-highcharts:${gatlingVerion}"
    compile "org.scala-lang:scala-compiler:${scalaVersion}"
    compile "org.scala-lang:scala-library:${scalaVersion}"
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
    compile "org.slf4j:log4j-over-slf4j:${slf4jVersion}"
    compile "ch.qos.logback:logback-classic:${logbackVersion}"
}

task insert100kInhabitants(type: JavaExec, group: "hazelnate") {
    classpath = sourceSets.main.runtimeClasspath
    main = gattlingMainClazz
    args = Eval.me("['-s', '${insert10kInhabitants}']")
}

task loadCountries(type: JavaExec, group: "hazelnate") {
    classpath = sourceSets.main.runtimeClasspath
    main = gattlingMainClazz
    args = Eval.me("['-s', '${loadCountries}']")
}

task loadInhabitants(type: JavaExec, group: "hazelnate") {
    classpath = sourceSets.main.runtimeClasspath
    main = gattlingMainClazz
    args = Eval.me("['-s', '${loadInhabitants}']")
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.useAnt = false
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}